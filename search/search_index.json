{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Welcome to the Apex documentation! The information described below is recommended for all users using Apex. Requirements Apex requires Unity 2019.4 LTS or above. Warning We aim to support all upcoming Unity versions, but keep in mind that Alpha and Beta versions of Unity are not officially supported . This is because Unity can introduce changes under the hood that break Apex functionality, and we need some time to adjust and push fixes. Download Head over to the Unity Asset Store to download Apex! Note Apex requires one license per seat because it is an editor extension. This means each person on your team using Apex must have their own license . For more information, see the Unity Asset Store EULA under Section 2.3 . Setup Success After the package has been imported, no action or configuration is required on your part!","title":"Getting Started"},{"location":"#getting-started","text":"Welcome to the Apex documentation! The information described below is recommended for all users using Apex.","title":"Getting Started"},{"location":"#requirements","text":"Apex requires Unity 2019.4 LTS or above. Warning We aim to support all upcoming Unity versions, but keep in mind that Alpha and Beta versions of Unity are not officially supported . This is because Unity can introduce changes under the hood that break Apex functionality, and we need some time to adjust and push fixes.","title":"Requirements"},{"location":"#download","text":"Head over to the Unity Asset Store to download Apex! Note Apex requires one license per seat because it is an editor extension. This means each person on your team using Apex must have their own license . For more information, see the Unity Asset Store EULA under Section 2.3 .","title":"Download"},{"location":"#setup","text":"Success After the package has been imported, no action or configuration is required on your part!","title":"Setup"},{"location":"api_references/custom_attributes/custom_painter/painter-attribute/","text":"Painter Attirbute Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from PainterAttribute class. public class ExampleAttribute : PainterAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : PainterAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } } Example public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"Painter Attirbute"},{"location":"api_references/custom_attributes/custom_painter/painter-attribute/#painter-attirbute","text":"Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from PainterAttribute class. public class ExampleAttribute : PainterAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : PainterAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } }","title":"Painter Attirbute"},{"location":"api_references/custom_attributes/custom_painter/painter-attribute/#example","text":"public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"Example"},{"location":"api_references/custom_attributes/custom_painter/property-painter/","text":"Property Painter Create new folder and name it Editor . Inside Editor folder create new class, ExamplePainter.cs public class ExamplePainter { } Inherit from PropertyPainter class. public class ExamplePainter : PropertyPainter { } Implement virtual method OnPainterGUI . public class ExamplePainter : PropertyPainter { public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Painter GUI here... } } Add PainterTarget attribute and set ExampleAttribute as target to this view. [PainterTarget(typeof(ExampleAttribute))] public class ExamplePainter : PropertyPainter { public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Property GUI here... } }","title":"Property Painter"},{"location":"api_references/custom_attributes/custom_painter/property-painter/#property-painter","text":"Create new folder and name it Editor . Inside Editor folder create new class, ExamplePainter.cs public class ExamplePainter { } Inherit from PropertyPainter class. public class ExamplePainter : PropertyPainter { } Implement virtual method OnPainterGUI . public class ExamplePainter : PropertyPainter { public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Painter GUI here... } } Add PainterTarget attribute and set ExampleAttribute as target to this view. [PainterTarget(typeof(ExampleAttribute))] public class ExamplePainter : PropertyPainter { public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Property GUI here... } }","title":"Property Painter"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/","text":"Virtual Methods OnInitialize Description Called once when initializing PropertyPainter. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , PainterAttribute painterAttribute , GUIContent label ) { // Some initialization... } Parameters Parameter Description property Serialized property with ViewAttribute. painterAttribute PainterAttribute of serialized property. label Label of serialized property. Example [PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyPainter. public override void OnInitialize ( SerializedProperty property , PainterAttribute painterAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = painterAttribute as ExampleAttribute ; // Some other initializations here... } } ModifyPropertyPosition Description Called before OnPainterGUI() for modify property position. void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { // Modify property position here. } Parameters Parameter Description originalPosition Stored original position of the property. modifiedPosition Current position which has been modified by other painters, if this property contains other painter attributes. Example [PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Called before OnPainterGUI() for modify property position. public override void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { const float offset = 5.0f ; modifiedPosition . x += offset ; modifiedPosition . width -= offset ; } } OnPainterGUI Description Called for rendering and handling GUI events. void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Painter GUI here... } Parameters Parameter Description originalPosition Stored original position of the property. painterPosition Rectangle on the screen to use for the painter GUI. property Serialized property with PainterAttribute. label Label of serialized property. Example [PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Called for rendering and handling GUI events. public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { GUI . Label ( painterPosition , \"Custom property painter\" ); } } GetPainterHeight Description Get the height of the painter, which required to display it. Calculate only the size of the current painter, not the entire property. The painter height will be added to the total size of the property with other painters. // Return height which needed to draw painter. float GetPainterHeight ( SerializedProperty property , GUIContent label ) { // Return height of painter. } Parameters Parameter Description property Serialized property with ViewAttribute. label Label of serialized property. Example [PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Return height which needed to draw painter. public virtual float GetPainterHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#virtual-methods","text":"","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#oninitialize","text":"","title":"OnInitialize"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#description","text":"Called once when initializing PropertyPainter. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , PainterAttribute painterAttribute , GUIContent label ) { // Some initialization... }","title":"Description"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#parameters","text":"Parameter Description property Serialized property with ViewAttribute. painterAttribute PainterAttribute of serialized property. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#example","text":"[PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyPainter. public override void OnInitialize ( SerializedProperty property , PainterAttribute painterAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = painterAttribute as ExampleAttribute ; // Some other initializations here... } }","title":"Example"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#modifypropertyposition","text":"","title":"ModifyPropertyPosition"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#description_1","text":"Called before OnPainterGUI() for modify property position. void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { // Modify property position here. }","title":"Description"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#parameters_1","text":"Parameter Description originalPosition Stored original position of the property. modifiedPosition Current position which has been modified by other painters, if this property contains other painter attributes.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#example_1","text":"[PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Called before OnPainterGUI() for modify property position. public override void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { const float offset = 5.0f ; modifiedPosition . x += offset ; modifiedPosition . width -= offset ; } }","title":"Example"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#onpaintergui","text":"","title":"OnPainterGUI"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#description_2","text":"Called for rendering and handling GUI events. void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { // Painter GUI here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#parameters_2","text":"Parameter Description originalPosition Stored original position of the property. painterPosition Rectangle on the screen to use for the painter GUI. property Serialized property with PainterAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#example_2","text":"[PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Called for rendering and handling GUI events. public override void OnPainterGUI ( Rect originalPosition , Rect painterPosition , SerializedProperty property , GUIContent label ) { GUI . Label ( painterPosition , \"Custom property painter\" ); } }","title":"Example"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#getpainterheight","text":"","title":"GetPainterHeight"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#description_3","text":"Get the height of the painter, which required to display it. Calculate only the size of the current painter, not the entire property. The painter height will be added to the total size of the property with other painters. // Return height which needed to draw painter. float GetPainterHeight ( SerializedProperty property , GUIContent label ) { // Return height of painter. }","title":"Description"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#parameters_3","text":"Parameter Description property Serialized property with ViewAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_painter/virtual-methods/#example_3","text":"[PainterTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyPainter { // Return height which needed to draw painter. public virtual float GetPainterHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/property-validator/","text":"Property Validator Create new folder and name it Editor . Inside Editor folder create new class, ExampleValidator.cs public class ExampleValidator { } Inherit from PropertyValidator class. public class ExampleValidator : PropertyValidator { } Implement abstract method Validate . public class ExampleValidator : PropertyValidator { public override void Validate ( SerializedProperty property ) { // Property validation here... } } Add ValidatorTarget attribute and set ExampleAttribute as target to this view. [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { public override void Validate ( SerializedProperty property ) { // Property validation here... } }","title":"Property Validator"},{"location":"api_references/custom_attributes/custom_validator/property-validator/#property-validator","text":"Create new folder and name it Editor . Inside Editor folder create new class, ExampleValidator.cs public class ExampleValidator { } Inherit from PropertyValidator class. public class ExampleValidator : PropertyValidator { } Implement abstract method Validate . public class ExampleValidator : PropertyValidator { public override void Validate ( SerializedProperty property ) { // Property validation here... } } Add ValidatorTarget attribute and set ExampleAttribute as target to this view. [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { public override void Validate ( SerializedProperty property ) { // Property validation here... } }","title":"Property Validator"},{"location":"api_references/custom_attributes/custom_validator/validator-attribute/","text":"Validator Attirbute Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from ValidatorAttribute class. public class ExampleAttribute : ValidatorAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : ValidatorAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } } Example public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"Validator Attirbute"},{"location":"api_references/custom_attributes/custom_validator/validator-attribute/#validator-attirbute","text":"Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from ValidatorAttribute class. public class ExampleAttribute : ValidatorAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : ValidatorAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } }","title":"Validator Attirbute"},{"location":"api_references/custom_attributes/custom_validator/validator-attribute/#example","text":"public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/","text":"Virtual Methods OnInitialize Description Called once when initializing PropertyValidator. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , ValidatorAttribute validatorAttribute , GUIContent label ) { // Some initialization... } Parameters Parameter Description property Serialized property with ValidatorAttribute. validatorAttribute ValidatorAttribute of serialized property. label Label of serialized property. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyValidator. public override void OnInitialize ( SerializedProperty property , ValidatorAttribute validatorAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = validatorAttribute as ExampleAttribute ; // Some other initializations here... } } Validate Description Called before drawing property. void Validate ( SerializedProperty property ) { // Property validation here... } Parameters Parameter Description property Serialized property with ValidatorAttribute. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before drawing property. public override void Validate ( SerializedProperty property ) { if ( property . floatValue < 0 ) { property . floatValue = 0 ; } } } ModifyPropertyPosition Description Called before OnValidatorGUI() for modify property position. void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { // Modify property position here. } Parameters Parameter Description originalPosition Stored original position of the property. modifiedPosition Current position which has been modified by other validators, if this property contains other validator attributes. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before OnValidatorGUI() for modify property position. public override void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { const float offset = 5.0f ; modifiedPosition . x += offset ; modifiedPosition . width -= offset ; } } BeforePropertyGUI Description Called before drawing property and before OnValidatorGUI(). void BeforePropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Before property GUI calls here... } Parameters Parameter Description position Position of the serialized property. property Serialized property with ValidatorAttribute. label Label of serialized property. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before drawing property and before OnValidatorGUI(). public override void BeforePropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { EditorGUI . BeginDisabledGroup ( true ); } } OnValidatorGUI Description Called for rendering and handling GUI events. void OnValidatorGUI ( Rect originalPosition , Rect validatorPosition , SerializedProperty property , GUIContent label ) { // Property GUI here... } Parameters Parameter Description originalPosition Stored original position of the property. validatorPosition Rectangle on the screen to use for the validator GUI. property Serialized property with ValidatorAttribute. label Label of serialized property. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called for rendering and handling GUI events. public override void OnValidatorGUI ( Rect originalPosition , Rect validatorPosition , SerializedProperty property , GUIContent label ) { GUI . Label ( validatorPosition , \"Custom validator message\" ); } } AfterPropertyGUI Description Called after drawing property and after OnValidatorGUI(). void AfterPropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { // After property GUI calls here... } Parameters Parameter Description position Position of the serialized property. property Serialized property with ValidatorAttribute. label Label of serialized property. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called after drawing property and after OnValidatorGUI(). public override void AfterPropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { EditorGUI . EndDisabledGroup (); } } GetValidatorHeight Description Get the height of the validator, which required to display it. Calculate only the size of the current validator, not the entire property. The validator height will be added to the total size of the property. // Return height which needed to draw validator. float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { // Return height of validator. } Parameters Parameter Description property Serialized property with ValidatorAttribute. label Label of serialized property. Example [ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Return height which needed to draw validator. public virtual float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#virtual-methods","text":"","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#oninitialize","text":"","title":"OnInitialize"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description","text":"Called once when initializing PropertyValidator. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , ValidatorAttribute validatorAttribute , GUIContent label ) { // Some initialization... }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters","text":"Parameter Description property Serialized property with ValidatorAttribute. validatorAttribute ValidatorAttribute of serialized property. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyValidator. public override void OnInitialize ( SerializedProperty property , ValidatorAttribute validatorAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = validatorAttribute as ExampleAttribute ; // Some other initializations here... } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#validate","text":"","title":"Validate"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_1","text":"Called before drawing property. void Validate ( SerializedProperty property ) { // Property validation here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_1","text":"Parameter Description property Serialized property with ValidatorAttribute.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_1","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before drawing property. public override void Validate ( SerializedProperty property ) { if ( property . floatValue < 0 ) { property . floatValue = 0 ; } } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#modifypropertyposition","text":"","title":"ModifyPropertyPosition"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_2","text":"Called before OnValidatorGUI() for modify property position. void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { // Modify property position here. }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_2","text":"Parameter Description originalPosition Stored original position of the property. modifiedPosition Current position which has been modified by other validators, if this property contains other validator attributes.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_2","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before OnValidatorGUI() for modify property position. public override void ModifyPropertyPosition ( Rect originalPosition , ref Rect modifiedPosition ) { const float offset = 5.0f ; modifiedPosition . x += offset ; modifiedPosition . width -= offset ; } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#beforepropertygui","text":"","title":"BeforePropertyGUI"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_3","text":"Called before drawing property and before OnValidatorGUI(). void BeforePropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Before property GUI calls here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_3","text":"Parameter Description position Position of the serialized property. property Serialized property with ValidatorAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_3","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called before drawing property and before OnValidatorGUI(). public override void BeforePropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { EditorGUI . BeginDisabledGroup ( true ); } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#onvalidatorgui","text":"","title":"OnValidatorGUI"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_4","text":"Called for rendering and handling GUI events. void OnValidatorGUI ( Rect originalPosition , Rect validatorPosition , SerializedProperty property , GUIContent label ) { // Property GUI here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_4","text":"Parameter Description originalPosition Stored original position of the property. validatorPosition Rectangle on the screen to use for the validator GUI. property Serialized property with ValidatorAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_4","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called for rendering and handling GUI events. public override void OnValidatorGUI ( Rect originalPosition , Rect validatorPosition , SerializedProperty property , GUIContent label ) { GUI . Label ( validatorPosition , \"Custom validator message\" ); } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#afterpropertygui","text":"","title":"AfterPropertyGUI"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_5","text":"Called after drawing property and after OnValidatorGUI(). void AfterPropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { // After property GUI calls here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_5","text":"Parameter Description position Position of the serialized property. property Serialized property with ValidatorAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_5","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Called after drawing property and after OnValidatorGUI(). public override void AfterPropertyGUI ( Rect position , SerializedProperty property , GUIContent label ) { EditorGUI . EndDisabledGroup (); } }","title":"Example"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#getvalidatorheight","text":"","title":"GetValidatorHeight"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#description_6","text":"Get the height of the validator, which required to display it. Calculate only the size of the current validator, not the entire property. The validator height will be added to the total size of the property. // Return height which needed to draw validator. float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { // Return height of validator. }","title":"Description"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#parameters_6","text":"Parameter Description property Serialized property with ValidatorAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_validator/virtual-methods/#example_6","text":"[ValidatorTarget(typeof(ExampleAttribute))] public class ExampleValidator : PropertyValidator { // Return height which needed to draw validator. public virtual float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Example"},{"location":"api_references/custom_attributes/custom_view/property-view/","text":"Property View Create new folder and name it Editor . Inside Editor folder create new class, ExampleView.cs public class ExampleView { } Inherit from PropertyView class. public class ExampleView : PropertyView { } Implement abstract method OnGUI . public class ExampleView : PropertyView { public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... } } Add ViewTarget attribute and set ExampleAttribute as target to this view. [ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... } }","title":"Property View"},{"location":"api_references/custom_attributes/custom_view/property-view/#property-view","text":"Create new folder and name it Editor . Inside Editor folder create new class, ExampleView.cs public class ExampleView { } Inherit from PropertyView class. public class ExampleView : PropertyView { } Implement abstract method OnGUI . public class ExampleView : PropertyView { public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... } } Add ViewTarget attribute and set ExampleAttribute as target to this view. [ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... } }","title":"Property View"},{"location":"api_references/custom_attributes/custom_view/view-attribute/","text":"View Attirbute Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from ViewAttribute class. public class ExampleAttribute : ViewAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : ViewAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } } Example public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"View Attirbute"},{"location":"api_references/custom_attributes/custom_view/view-attribute/#view-attirbute","text":"Create new class, for example ExampleAttribute.cs public class ExampleAttribute { } Inherit from ViewAttribute class. public class ExampleAttribute : ViewAttribute { } Optionaly add Required / Optional parameters. public class ExampleAttribute : ViewAttribute { // Required parameter. public readonly string text ; // Constructor with required parameter. public ExampleAttribute ( string text ) { this . text = text ; } // Optional parameter. public float SomeValue { get ; set ; } }","title":"View Attirbute"},{"location":"api_references/custom_attributes/custom_view/view-attribute/#example","text":"public class ExampleComponent : MonoBehaviour { // Required parameter. [Example(\"Some Text\")] public float value ; // Required and optional parameter. [Example(\"Some Text\", Value = 10.0f)] public float value ; }","title":"Example"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/","text":"Virtual Methods OnInitialize Description Called once when initializing PropertyView. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , ViewAttribute viewAttribute , GUIContent label ) { // Some initialization... } Parameters Parameter Description property Serialized property with ViewAttribute. viewAttribute ViewAttribute of serialized property. label Label of serialized property. Example [ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyView. public override void OnInitialize ( SerializedProperty property , ViewAttribute viewAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = viewAttribute as ExampleAttribute ; // Some other initializations here... } } OnGUI Description Called for rendering and handling GUI events. void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... } Parameters Parameter Description position Position of the serialized property. property Serialized property with ViewAttribute. label Label of serialized property. Example [ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { // Called for rendering and handling GUI events. public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { GUI . Label ( position , \"Custom property view\" ); } } GetPropertyHeight Description Return height which needed to draw property. float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { // Return height of property. } Parameters Parameter Description property Serialized property with ViewAttribute. label Label of serialized property. Example [ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { // Return height which needed to draw property. public virtual float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#virtual-methods","text":"","title":"Virtual Methods"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#oninitialize","text":"","title":"OnInitialize"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#description","text":"Called once when initializing PropertyView. Very useful for make some initializations of properties and get view attribute. void OnInitialize ( SerializedProperty property , ViewAttribute viewAttribute , GUIContent label ) { // Some initialization... }","title":"Description"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#parameters","text":"Parameter Description property Serialized property with ViewAttribute. viewAttribute ViewAttribute of serialized property. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#example","text":"[ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { private ExampleAttribute exampleAttribute ; // Called once when initializing PropertyView. public override void OnInitialize ( SerializedProperty property , ViewAttribute viewAttribute , GUIContent label ) { // Getting ExampleAttribute attribute from field. exampleAttribute = viewAttribute as ExampleAttribute ; // Some other initializations here... } }","title":"Example"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#ongui","text":"","title":"OnGUI"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#description_1","text":"Called for rendering and handling GUI events. void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { // Property GUI here... }","title":"Description"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#parameters_1","text":"Parameter Description position Position of the serialized property. property Serialized property with ViewAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#example_1","text":"[ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { // Called for rendering and handling GUI events. public override void OnGUI ( Rect position , SerializedProperty property , GUIContent label ) { GUI . Label ( position , \"Custom property view\" ); } }","title":"Example"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#getpropertyheight","text":"","title":"GetPropertyHeight"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#description_2","text":"Return height which needed to draw property. float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { // Return height of property. }","title":"Description"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#parameters_2","text":"Parameter Description property Serialized property with ViewAttribute. label Label of serialized property.","title":"Parameters"},{"location":"api_references/custom_attributes/custom_view/virtual-methods/#example_2","text":"[ViewTarget(typeof(ExampleAttribute))] public class ExampleView : PropertyView { // Return height which needed to draw property. public virtual float GetPropertyHeight ( SerializedProperty property , GUIContent label ) { return 20 ; } }","title":"Example"},{"location":"api_references/interfaces/i-property-validator-receiver/","text":"IPropertyValidatorReceiver Interface to receive callbacks when initializing Apex attributes. The callback interface only works with Apex attributes: View , Painter , Validator . Description Use this interface to restrict how your attribute works with specific properties. Implement IPropertyValidatorReceiver interface and implement IsValidProperty method. bool IsValidProperty ( SerializedProperty property , GUIContent label ) { return true / false ; } Parameter Description property Serialized property of current attribute. label Label of serialized property. Return true if this property valid the using with this attribute. If return false, this attribute will be ignored. Example For example you created an attribute for working with arrays and you want to be sure that this attribute will only work with arrays, and for other types it will be ignored. [ViewTarget(typeof(ArrayAttribute))] public class ArrayView : PropertyView , IPropertyValidatorReceiver { // Array view code.. public bool IsValidProperty ( SerializedProperty property , GUIContent label ) { return property . isArray ; } }","title":"IPropertyValidatorReceiver"},{"location":"api_references/interfaces/i-property-validator-receiver/#ipropertyvalidatorreceiver","text":"Interface to receive callbacks when initializing Apex attributes. The callback interface only works with Apex attributes: View , Painter , Validator .","title":"IPropertyValidatorReceiver"},{"location":"api_references/interfaces/i-property-validator-receiver/#description","text":"Use this interface to restrict how your attribute works with specific properties. Implement IPropertyValidatorReceiver interface and implement IsValidProperty method. bool IsValidProperty ( SerializedProperty property , GUIContent label ) { return true / false ; } Parameter Description property Serialized property of current attribute. label Label of serialized property. Return true if this property valid the using with this attribute. If return false, this attribute will be ignored.","title":"Description"},{"location":"api_references/interfaces/i-property-validator-receiver/#example","text":"For example you created an attribute for working with arrays and you want to be sure that this attribute will only work with arrays, and for other types it will be ignored. [ViewTarget(typeof(ArrayAttribute))] public class ArrayView : PropertyView , IPropertyValidatorReceiver { // Array view code.. public bool IsValidProperty ( SerializedProperty property , GUIContent label ) { return property . isArray ; } }","title":"Example"},{"location":"attributes/button_attributes/bottom-button/","text":"Bottom Button [BottomButton] attribute used adding button to field placed in bottom. Support Types Any fields Parameters Parameter Name Description Name Name of method. Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Group Group name of buttons. Height Custom button height. Style Custom style for button. Examples [ButtomButton(\"Function\")] public float value ; public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [BottomButton(\"FirstFunction\", Label = \"First Function\", Group = \"Functions Group\", Style = \"ButtonLeft\")] [BottomButton(\"SecondFunction\", Label = \"Second Function\", Group = \"Functions Group\", Style = \"ButtonRight\")] public float value ; public void FirstFunction () { value = 10 ; } public void SecondFunction () { value = 30 ; } } Live demo","title":"Bottom Button"},{"location":"attributes/button_attributes/bottom-button/#bottom-button","text":"[BottomButton] attribute used adding button to field placed in bottom.","title":"Bottom Button"},{"location":"attributes/button_attributes/bottom-button/#support-types","text":"Any fields","title":"Support Types"},{"location":"attributes/button_attributes/bottom-button/#parameters","text":"Parameter Name Description Name Name of method. Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Group Group name of buttons. Height Custom button height. Style Custom style for button.","title":"Parameters"},{"location":"attributes/button_attributes/bottom-button/#examples","text":"[ButtomButton(\"Function\")] public float value ; public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/button_attributes/bottom-button/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [BottomButton(\"FirstFunction\", Label = \"First Function\", Group = \"Functions Group\", Style = \"ButtonLeft\")] [BottomButton(\"SecondFunction\", Label = \"Second Function\", Group = \"Functions Group\", Style = \"ButtonRight\")] public float value ; public void FirstFunction () { value = 10 ; } public void SecondFunction () { value = 30 ; } } Live demo","title":"Demo"},{"location":"attributes/button_attributes/button/","text":"Button [Button] attribute used adding button to inspector. Support Types Any methods Parameters Parameter Name Description Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Height Custom button height. Style Custom style for button. Examples [Button] public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; [Button] public void FirstFunction () { Debug . Log ( \"Called First Function!\" ); } } Live demo","title":"Button"},{"location":"attributes/button_attributes/button/#button","text":"[Button] attribute used adding button to inspector.","title":"Button"},{"location":"attributes/button_attributes/button/#support-types","text":"Any methods","title":"Support Types"},{"location":"attributes/button_attributes/button/#parameters","text":"Parameter Name Description Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Height Custom button height. Style Custom style for button.","title":"Parameters"},{"location":"attributes/button_attributes/button/#examples","text":"[Button] public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/button_attributes/button/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; [Button] public void FirstFunction () { Debug . Log ( \"Called First Function!\" ); } } Live demo","title":"Demo"},{"location":"attributes/button_attributes/inline-button/","text":"Inline Button [Button] attribute used adding button to field. Support Types Any fields Parameters Parameter Name Description Name Name of method. Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Width Custom button width. Style Custom style for button. Examples [InlineButton(\"Function\")] public float value ; public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; #if UNITY_EDITOR using UnityEditor ; #endif public class ExampleComponent : MonoBehaviour { [InlineButton(\"Function\", Label = \"@_Popup\", Style = \"IconButton\")] public string value ; #if UNITY_EDITOR public void Function () { GenericMenu menu = new GenericMenu (); menu . AddItem ( new GUIContent ( \"Text 1\" ), false , () => value = \"Text 1\" ); menu . AddItem ( new GUIContent ( \"Text 2\" ), false , () => value = \"Text 2\" ); menu . AddItem ( new GUIContent ( \"Text 3\" ), false , () => value = \"Text 3\" ); menu . ShowAsContext (); } #endif } Live demo","title":"Inline Button"},{"location":"attributes/button_attributes/inline-button/#inline-button","text":"[Button] attribute used adding button to field.","title":"Inline Button"},{"location":"attributes/button_attributes/inline-button/#support-types","text":"Any fields","title":"Support Types"},{"location":"attributes/button_attributes/inline-button/#parameters","text":"Parameter Name Description Name Name of method. Label Custom name for button. Use the @ prefix to indicate, that a texture will be used instead of the name. Arguments: @{Default Unity Icon Name} , @{Path to texture} Example: @_Popup , @Assets/... Width Custom button width. Style Custom style for button.","title":"Parameters"},{"location":"attributes/button_attributes/inline-button/#examples","text":"[InlineButton(\"Function\")] public float value ; public void Function () { //... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/button_attributes/inline-button/#demo","text":"using ApexInspector ; using UnityEngine ; #if UNITY_EDITOR using UnityEditor ; #endif public class ExampleComponent : MonoBehaviour { [InlineButton(\"Function\", Label = \"@_Popup\", Style = \"IconButton\")] public string value ; #if UNITY_EDITOR public void Function () { GenericMenu menu = new GenericMenu (); menu . AddItem ( new GUIContent ( \"Text 1\" ), false , () => value = \"Text 1\" ); menu . AddItem ( new GUIContent ( \"Text 2\" ), false , () => value = \"Text 2\" ); menu . AddItem ( new GUIContent ( \"Text 3\" ), false , () => value = \"Text 3\" ); menu . ShowAsContext (); } #endif } Live demo","title":"Demo"},{"location":"attributes/condition_attributes/active-if/","text":"Active If [ActiveIf] attribute allow disable/enable property by specific condition. Support Types Any types. Parameters Option 1 Name Description Property Name Boolean property name. Option 2 Name Description Property Name Boolean property name. Condition Set true to make this property active, while Property Name is true. Set false to make this property active, while Property Name is false. Option 3 Name Description First Property Numeric property name. Condition Set specific condition: > < <= >= Second Property Numeric property name. Examples /* --- Option 1 --- */ public bool toggle ; [ActiveIf(\"toggle\")] public int intValue ; /* ---------------- */ /* --- Option 2 --- */ public bool toggle2 ; [ActiveIf(\"toggle2\", true)] public float someValue ; /* ---------------- */ /* --- Option 3 --- */ public float value1 ; public float value2 ; [ActiveIf(\"value1\", \">\", \"value2\")] public string someText ; /* ---------------- */ Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public bool toggle ; [VisibleIf(\"toggle\")] public float value ; } Live demo","title":"Active If"},{"location":"attributes/condition_attributes/active-if/#active-if","text":"[ActiveIf] attribute allow disable/enable property by specific condition.","title":"Active If"},{"location":"attributes/condition_attributes/active-if/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/condition_attributes/active-if/#parameters","text":"Option 1 Name Description Property Name Boolean property name. Option 2 Name Description Property Name Boolean property name. Condition Set true to make this property active, while Property Name is true. Set false to make this property active, while Property Name is false. Option 3 Name Description First Property Numeric property name. Condition Set specific condition: > < <= >= Second Property Numeric property name.","title":"Parameters"},{"location":"attributes/condition_attributes/active-if/#examples","text":"/* --- Option 1 --- */ public bool toggle ; [ActiveIf(\"toggle\")] public int intValue ; /* ---------------- */ /* --- Option 2 --- */ public bool toggle2 ; [ActiveIf(\"toggle2\", true)] public float someValue ; /* ---------------- */ /* --- Option 3 --- */ public float value1 ; public float value2 ; [ActiveIf(\"value1\", \">\", \"value2\")] public string someText ; /* ---------------- */ Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/condition_attributes/active-if/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public bool toggle ; [VisibleIf(\"toggle\")] public float value ; } Live demo","title":"Demo"},{"location":"attributes/condition_attributes/visible-if/","text":"Visible If [VisibleIf] attribute allow show/hide property by specific condition. Support Types Any types. Parameters Option 1 Name Description Property Name Boolean property name. Option 2 Name Description Property Name Boolean property name. Condition Set true to make this property active, while Property Name is true. Set false to make this property active, while Property Name is false. Option 3 Name Description First Property Numeric property name. Condition Set specific condition: > < <= >= Second Property Numeric property name. Examples /* --- Option 1 --- */ public bool toggle ; [VisibleIf(\"toggle\")] public int intValue ; /* ---------------- */ /* --- Option 2 --- */ public bool toggle2 ; [VisibleIf(\"toggle2\", true)] public float someValue ; /* ---------------- */ /* --- Option 3 --- */ public float value1 ; public float value2 ; [VisibleIf(\"value1\", \">\", \"value2\")] public string someText ; /* ---------------- */ Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public bool toggle ; [VisibleIf(\"toggle\")] public float value ; } Live demo","title":"Visible If"},{"location":"attributes/condition_attributes/visible-if/#visible-if","text":"[VisibleIf] attribute allow show/hide property by specific condition.","title":"Visible If"},{"location":"attributes/condition_attributes/visible-if/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/condition_attributes/visible-if/#parameters","text":"Option 1 Name Description Property Name Boolean property name. Option 2 Name Description Property Name Boolean property name. Condition Set true to make this property active, while Property Name is true. Set false to make this property active, while Property Name is false. Option 3 Name Description First Property Numeric property name. Condition Set specific condition: > < <= >= Second Property Numeric property name.","title":"Parameters"},{"location":"attributes/condition_attributes/visible-if/#examples","text":"/* --- Option 1 --- */ public bool toggle ; [VisibleIf(\"toggle\")] public int intValue ; /* ---------------- */ /* --- Option 2 --- */ public bool toggle2 ; [VisibleIf(\"toggle2\", true)] public float someValue ; /* ---------------- */ /* --- Option 3 --- */ public float value1 ; public float value2 ; [VisibleIf(\"value1\", \">\", \"value2\")] public string someText ; /* ---------------- */ Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/condition_attributes/visible-if/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public bool toggle ; [VisibleIf(\"toggle\")] public float value ; } Live demo","title":"Demo"},{"location":"attributes/layout_attributes/button-horizontal-group/","text":"Button Horiaontal Group [ButtonHorizontalGroup] attribute used for layout button in horizontal group. Support Types Any types. Parameters Parameter Name Description Name Name of group Examples [Button] [ButtonHorizontalGroup(\"Functions\")] public void FirstFunction () { // FirstFunction code... } [Button] [ButtonHorizontalGroup(\"Functions\")] public void SecondFunction () { // SecondFunction code... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; [Button] [ButtonHorizontalGroup(\"Functions\")] public void FirstFunction () { Debug . Log ( \"Called First Function!\" ); } [Button] [ButtonHorizontalGroup(\"Functions\")] public void SecondFunction () { Debug . Log ( \"Called Second Function!\" ); } } Live demo","title":"Button Horiaontal Group"},{"location":"attributes/layout_attributes/button-horizontal-group/#button-horiaontal-group","text":"[ButtonHorizontalGroup] attribute used for layout button in horizontal group.","title":"Button Horiaontal Group"},{"location":"attributes/layout_attributes/button-horizontal-group/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/layout_attributes/button-horizontal-group/#parameters","text":"Parameter Name Description Name Name of group","title":"Parameters"},{"location":"attributes/layout_attributes/button-horizontal-group/#examples","text":"[Button] [ButtonHorizontalGroup(\"Functions\")] public void FirstFunction () { // FirstFunction code... } [Button] [ButtonHorizontalGroup(\"Functions\")] public void SecondFunction () { // SecondFunction code... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/layout_attributes/button-horizontal-group/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; [Button] [ButtonHorizontalGroup(\"Functions\")] public void FirstFunction () { Debug . Log ( \"Called First Function!\" ); } [Button] [ButtonHorizontalGroup(\"Functions\")] public void SecondFunction () { Debug . Log ( \"Called Second Function!\" ); } } Live demo","title":"Demo"},{"location":"attributes/layout_attributes/foldout/","text":"Foldout [Foldout] attribute used for layout properties in expandable foldout. Support Types Any types. Parameters Parameter Name Description Title Title of foldout Examples public float value1 ; [Foldout(\"Some Title\")] public float value2 ; [Foldout(\"Some Title\")] public float value3 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value1 ; [Foldout(\"Some Title\")] public float value2 ; [Foldout(\"Some Title\")] public float value3 ; } Live demo","title":"Foldout"},{"location":"attributes/layout_attributes/foldout/#foldout","text":"[Foldout] attribute used for layout properties in expandable foldout.","title":"Foldout"},{"location":"attributes/layout_attributes/foldout/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/layout_attributes/foldout/#parameters","text":"Parameter Name Description Title Title of foldout","title":"Parameters"},{"location":"attributes/layout_attributes/foldout/#examples","text":"public float value1 ; [Foldout(\"Some Title\")] public float value2 ; [Foldout(\"Some Title\")] public float value3 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/layout_attributes/foldout/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value1 ; [Foldout(\"Some Title\")] public float value2 ; [Foldout(\"Some Title\")] public float value3 ; } Live demo","title":"Demo"},{"location":"attributes/layout_attributes/group/","text":"Group [Group] attribute used for layout properties in group. Support Types Any types. Parameters Parameter Name Description Title Title of group Examples [Group(\"Some Title\")] public float value1 ; [Group(\"Some Title\")] public float value2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Values\")] public int value1 ; [Group(\"Values\")] public float value2 ; [Group(\"Values\")] public string value3 ; } Static demo","title":"Group"},{"location":"attributes/layout_attributes/group/#group","text":"[Group] attribute used for layout properties in group.","title":"Group"},{"location":"attributes/layout_attributes/group/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/layout_attributes/group/#parameters","text":"Parameter Name Description Title Title of group","title":"Parameters"},{"location":"attributes/layout_attributes/group/#examples","text":"[Group(\"Some Title\")] public float value1 ; [Group(\"Some Title\")] public float value2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/layout_attributes/group/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Values\")] public int value1 ; [Group(\"Values\")] public float value2 ; [Group(\"Values\")] public string value3 ; } Static demo","title":"Demo"},{"location":"attributes/layout_attributes/tab/","text":"Tab [Tab] attribute used for layout properties in specific tabs. Support Types Any types. Parameters Parameter Name Description Name Name target tab group. Title Title of tab Examples [Tab(\"Tab Group 1\", \"Tab 1\")] public float value1 ; [Tab(\"Tab Group 1\", \"Tab 1\")] public float value2 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value3 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value4 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Tab(\"Tab Group 1\", \"Tab 1\")] public float value1 ; [Tab(\"Tab Group 1\", \"Tab 1\")] public float value2 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value3 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value4 ; } Live demo","title":"Tab"},{"location":"attributes/layout_attributes/tab/#tab","text":"[Tab] attribute used for layout properties in specific tabs.","title":"Tab"},{"location":"attributes/layout_attributes/tab/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/layout_attributes/tab/#parameters","text":"Parameter Name Description Name Name target tab group. Title Title of tab","title":"Parameters"},{"location":"attributes/layout_attributes/tab/#examples","text":"[Tab(\"Tab Group 1\", \"Tab 1\")] public float value1 ; [Tab(\"Tab Group 1\", \"Tab 1\")] public float value2 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value3 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value4 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/layout_attributes/tab/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Tab(\"Tab Group 1\", \"Tab 1\")] public float value1 ; [Tab(\"Tab Group 1\", \"Tab 1\")] public float value2 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value3 ; [Tab(\"Tab Group 1\", \"Tab 2\")] public float value4 ; } Live demo","title":"Demo"},{"location":"attributes/misc_attributes/hide-label/","text":"Hide Label [HideLabel] attribute used hiding label of property. Support Types Any fields Parameters No parameters Examples [HideLabel] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [HideLabel] public int value ; } Static demo","title":"Hide Label"},{"location":"attributes/misc_attributes/hide-label/#hide-label","text":"[HideLabel] attribute used hiding label of property.","title":"Hide Label"},{"location":"attributes/misc_attributes/hide-label/#support-types","text":"Any fields","title":"Support Types"},{"location":"attributes/misc_attributes/hide-label/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/misc_attributes/hide-label/#examples","text":"[HideLabel] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/misc_attributes/hide-label/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [HideLabel] public int value ; } Static demo","title":"Demo"},{"location":"attributes/misc_attributes/hide-script-field/","text":"Hide Script Field [HideScriptField] attribute used for hiding default script reference field of component. Support Types Any components Parameters No parameters Examples [HideScriptField] public class ExampleComponent : MonoBehaviour { // Script content... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; [HideScriptField] public class ExampleComponent : MonoBehaviour { public int value ; } Static demo","title":"Hide Script Field"},{"location":"attributes/misc_attributes/hide-script-field/#hide-script-field","text":"[HideScriptField] attribute used for hiding default script reference field of component.","title":"Hide Script Field"},{"location":"attributes/misc_attributes/hide-script-field/#support-types","text":"Any components","title":"Support Types"},{"location":"attributes/misc_attributes/hide-script-field/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/misc_attributes/hide-script-field/#examples","text":"[HideScriptField] public class ExampleComponent : MonoBehaviour { // Script content... } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/misc_attributes/hide-script-field/#demo","text":"using ApexInspector ; using UnityEngine ; [HideScriptField] public class ExampleComponent : MonoBehaviour { public int value ; } Static demo","title":"Demo"},{"location":"attributes/misc_attributes/label/","text":"Label [Label] attribute used changing deafult label of property. Support Types Any fields Parameters Parameter Name Description Name New name of property Examples [Label(\"Custom Label\")] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Label(\"Custom Label\")] public int value ; } Static demo","title":"Label"},{"location":"attributes/misc_attributes/label/#label","text":"[Label] attribute used changing deafult label of property.","title":"Label"},{"location":"attributes/misc_attributes/label/#support-types","text":"Any fields","title":"Support Types"},{"location":"attributes/misc_attributes/label/#parameters","text":"Parameter Name Description Name New name of property","title":"Parameters"},{"location":"attributes/misc_attributes/label/#examples","text":"[Label(\"Custom Label\")] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/misc_attributes/label/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Label(\"Custom Label\")] public int value ; } Static demo","title":"Demo"},{"location":"attributes/misc_attributes/readonly/","text":"ReadOnly [ReadOnly] attribute used mark property as readonly. Property cannot be edited. Support Types Any fields Parameters No parameters Examples [ReadOnly] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ReadOnly] public int value ; } Live demo","title":"ReadOnly"},{"location":"attributes/misc_attributes/readonly/#readonly","text":"[ReadOnly] attribute used mark property as readonly. Property cannot be edited.","title":"ReadOnly"},{"location":"attributes/misc_attributes/readonly/#support-types","text":"Any fields","title":"Support Types"},{"location":"attributes/misc_attributes/readonly/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/misc_attributes/readonly/#examples","text":"[ReadOnly] public int value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/misc_attributes/readonly/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ReadOnly] public int value ; } Live demo","title":"Demo"},{"location":"attributes/misc_attributes/reference-content/","text":"Reference Content [ReferenceContent] attribute used for changing content label of reference which used in [DropdownReference] . Support Types Any references Parameters Parameter Name Description Name Name of reference. Tooltip Tooltip for reference. Examples public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SerializeReference] [DropdownReference] public Animal animal ; } public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Live demo","title":"Reference Content"},{"location":"attributes/misc_attributes/reference-content/#reference-content","text":"[ReferenceContent] attribute used for changing content label of reference which used in [DropdownReference] .","title":"Reference Content"},{"location":"attributes/misc_attributes/reference-content/#support-types","text":"Any references","title":"Support Types"},{"location":"attributes/misc_attributes/reference-content/#parameters","text":"Parameter Name Description Name Name of reference. Tooltip Tooltip for reference.","title":"Parameters"},{"location":"attributes/misc_attributes/reference-content/#examples","text":"public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/misc_attributes/reference-content/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SerializeReference] [DropdownReference] public Animal animal ; } public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Live demo","title":"Demo"},{"location":"attributes/painter_attributes/indent/","text":"Indent [Indent] attribute allow to change indent level of property. Support Types Any types. Parameters Name Description Level Indent level of the field. Following Add current indent level for all following properties. If some following property has [Indent] attribute, Following will be ignored for it. Examples [Indent(1)] public float floatValue ; [Indent(2)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value1 ; [Indent(1)] public int value2 ; [Indent(2)] public int value3 ; } Static demo","title":"Indent"},{"location":"attributes/painter_attributes/indent/#indent","text":"[Indent] attribute allow to change indent level of property.","title":"Indent"},{"location":"attributes/painter_attributes/indent/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/painter_attributes/indent/#parameters","text":"Name Description Level Indent level of the field. Following Add current indent level for all following properties. If some following property has [Indent] attribute, Following will be ignored for it.","title":"Parameters"},{"location":"attributes/painter_attributes/indent/#examples","text":"[Indent(1)] public float floatValue ; [Indent(2)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/indent/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value1 ; [Indent(1)] public int value2 ; [Indent(2)] public int value3 ; } Static demo","title":"Demo"},{"location":"attributes/painter_attributes/label-width/","text":"Label Width [LabelWidth] attribute allow to change width between label and property. Support Types Any types. Parameters Name Description Widith Width between label and property. Examples [LabelWidth(150)] public float floatValue ; [Indent(250)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [LabelWidth(300)] public float customWidth ; public float defaultWidth ; } Static demo","title":"Label Width"},{"location":"attributes/painter_attributes/label-width/#label-width","text":"[LabelWidth] attribute allow to change width between label and property.","title":"Label Width"},{"location":"attributes/painter_attributes/label-width/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/painter_attributes/label-width/#parameters","text":"Name Description Widith Width between label and property.","title":"Parameters"},{"location":"attributes/painter_attributes/label-width/#examples","text":"[LabelWidth(150)] public float floatValue ; [Indent(250)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/label-width/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [LabelWidth(300)] public float customWidth ; public float defaultWidth ; } Static demo","title":"Demo"},{"location":"attributes/painter_attributes/message/","text":"Message [Message] attribute used for drawing some text. Support Types Type String Parameters Name Description Text Text of the message. Message Type Type of the message. The color changes depending on the type. Examples [Message(\"Some text here...\")] public string value1 ; [Message(\"Some text here...\", MessageType.Warning)] public GameObject value2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Message(\"Hello!\\nThis is Apex Message attribute!\", MessageType.Warning)] public GameObject value ; } Static demo","title":"Message"},{"location":"attributes/painter_attributes/message/#message","text":"[Message] attribute used for drawing some text.","title":"Message"},{"location":"attributes/painter_attributes/message/#support-types","text":"Type String","title":"Support Types"},{"location":"attributes/painter_attributes/message/#parameters","text":"Name Description Text Text of the message. Message Type Type of the message. The color changes depending on the type.","title":"Parameters"},{"location":"attributes/painter_attributes/message/#examples","text":"[Message(\"Some text here...\")] public string value1 ; [Message(\"Some text here...\", MessageType.Warning)] public GameObject value2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/message/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Message(\"Hello!\\nThis is Apex Message attribute!\", MessageType.Warning)] public GameObject value ; } Static demo","title":"Demo"},{"location":"attributes/painter_attributes/object-preview/","text":"Object Preview [ObjectPreview] attribute used for drawing Object preview window. Support Types All Object types. Parameters Name Description Height Height of the preview window. Expandable Set true to hided in expandable foldout. Examples [ObjectPreview] public Object values ; [ObjectPreview(Height = 120)] public GameObject weapon ; [ObjectPreview(Height = 200, Expandable = true)] public GameObject sword ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ObjectPreview(Expandable = true)] public GameObject someObject ; } Live demo","title":"Object Preview"},{"location":"attributes/painter_attributes/object-preview/#object-preview","text":"[ObjectPreview] attribute used for drawing Object preview window.","title":"Object Preview"},{"location":"attributes/painter_attributes/object-preview/#support-types","text":"All Object types.","title":"Support Types"},{"location":"attributes/painter_attributes/object-preview/#parameters","text":"Name Description Height Height of the preview window. Expandable Set true to hided in expandable foldout.","title":"Parameters"},{"location":"attributes/painter_attributes/object-preview/#examples","text":"[ObjectPreview] public Object values ; [ObjectPreview(Height = 120)] public GameObject weapon ; [ObjectPreview(Height = 200, Expandable = true)] public GameObject sword ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/object-preview/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ObjectPreview(Expandable = true)] public GameObject someObject ; } Live demo","title":"Demo"},{"location":"attributes/painter_attributes/prefix/","text":"Prefix [Prefix] attribute allow to add prefix text to property. Support Types Any types. Parameters Name Description Text Prefix text. Before Property Set true to draw prefix before property field. Examples [Prefix(\"Some text\")] public float floatValue ; [Prefix(\"Some text\", true)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Prefix(\"Some text\")] public float floatValue ; [Prefix(\"[Some text] \", true)] public int intValue ; } Static demo","title":"Prefix"},{"location":"attributes/painter_attributes/prefix/#prefix","text":"[Prefix] attribute allow to add prefix text to property.","title":"Prefix"},{"location":"attributes/painter_attributes/prefix/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/painter_attributes/prefix/#parameters","text":"Name Description Text Prefix text. Before Property Set true to draw prefix before property field.","title":"Parameters"},{"location":"attributes/painter_attributes/prefix/#examples","text":"[Prefix(\"Some text\")] public float floatValue ; [Prefix(\"Some text\", true)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/prefix/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Prefix(\"Some text\")] public float floatValue ; [Prefix(\"[Some text] \", true)] public int intValue ; } Static demo","title":"Demo"},{"location":"attributes/painter_attributes/property-space/","text":"Property Space [PropertySpace] attribute add space after property. Support Types Any types. Parameters Name Description Space Space after field. Examples [PropertySpace(10)] public float floatValue ; [PropertySpace(5)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [PropertySpace(10)] public float floatValue ; public int intValue ; } Static demo","title":"Property Space"},{"location":"attributes/painter_attributes/property-space/#property-space","text":"[PropertySpace] attribute add space after property.","title":"Property Space"},{"location":"attributes/painter_attributes/property-space/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/painter_attributes/property-space/#parameters","text":"Name Description Space Space after field.","title":"Parameters"},{"location":"attributes/painter_attributes/property-space/#examples","text":"[PropertySpace(10)] public float floatValue ; [PropertySpace(5)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/property-space/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [PropertySpace(10)] public float floatValue ; public int intValue ; } Static demo","title":"Demo"},{"location":"attributes/painter_attributes/suffix/","text":"Suffix [Suffix] attribute allow to add suffix text to property. Support Types Any types. Parameters Name Description Text Suffix text. Muted Muted text. Examples [Suffix(\"Some text\")] public float floatValue ; [Suffix(\"Some text\", true)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Suffix(\"m/s\")] public float runSpeed ; [Suffix(\"m/s\", true)] public int walkSpeed ; } Static demo","title":"Suffix"},{"location":"attributes/painter_attributes/suffix/#suffix","text":"[Suffix] attribute allow to add suffix text to property.","title":"Suffix"},{"location":"attributes/painter_attributes/suffix/#support-types","text":"Any types.","title":"Support Types"},{"location":"attributes/painter_attributes/suffix/#parameters","text":"Name Description Text Suffix text. Muted Muted text.","title":"Parameters"},{"location":"attributes/painter_attributes/suffix/#examples","text":"[Suffix(\"Some text\")] public float floatValue ; [Suffix(\"Some text\", true)] public int intValue ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/painter_attributes/suffix/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Suffix(\"m/s\")] public float runSpeed ; [Suffix(\"m/s\", true)] public int walkSpeed ; } Static demo","title":"Demo"},{"location":"attributes/validator_attributes/asset-only/","text":"Asset Only [AssetOnly] The attribute checks that the asset you want to add to the field is an asset from the project window. Support Types All asset types. Parameters No parameters Examples [AssetOnly] public Object value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [AssetOnly] public GameObject someObject ; } Live demo","title":"Asset Only"},{"location":"attributes/validator_attributes/asset-only/#asset-only","text":"[AssetOnly] The attribute checks that the asset you want to add to the field is an asset from the project window.","title":"Asset Only"},{"location":"attributes/validator_attributes/asset-only/#support-types","text":"All asset types.","title":"Support Types"},{"location":"attributes/validator_attributes/asset-only/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/validator_attributes/asset-only/#examples","text":"[AssetOnly] public Object value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/validator_attributes/asset-only/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [AssetOnly] public GameObject someObject ; } Live demo","title":"Demo"},{"location":"attributes/validator_attributes/max-value/","text":"Max Value [MaxValue] The attribute checks that the number field is less than/equal to specific value. Support Types Type Integer Float Double Parameters Parameter Name Description Value Max possible value for number field. PropertyName Max possible value represented in property for number field. Tolerance TODO! Examples [MaxValue(\"maxHealth\")] public int health ; [MaxValue(100)] public int maxHealth ; [MaxValue(10)] public float runSpeed ; [MaxValue(\"runSpeed\", 1)] public float walkSpeed ; [MaxValue(10)] public double someValue ; [MaxValue(\"someValue\", 0.9f)] public double someValue2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MaxValue(100)] public int speed ; } Live demo","title":"Max Value"},{"location":"attributes/validator_attributes/max-value/#max-value","text":"[MaxValue] The attribute checks that the number field is less than/equal to specific value.","title":"Max Value"},{"location":"attributes/validator_attributes/max-value/#support-types","text":"Type Integer Float Double","title":"Support Types"},{"location":"attributes/validator_attributes/max-value/#parameters","text":"Parameter Name Description Value Max possible value for number field. PropertyName Max possible value represented in property for number field. Tolerance TODO!","title":"Parameters"},{"location":"attributes/validator_attributes/max-value/#examples","text":"[MaxValue(\"maxHealth\")] public int health ; [MaxValue(100)] public int maxHealth ; [MaxValue(10)] public float runSpeed ; [MaxValue(\"runSpeed\", 1)] public float walkSpeed ; [MaxValue(10)] public double someValue ; [MaxValue(\"someValue\", 0.9f)] public double someValue2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/validator_attributes/max-value/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MaxValue(100)] public int speed ; } Live demo","title":"Demo"},{"location":"attributes/validator_attributes/min-value/","text":"Min Value [MinValue] The attribute checks that the number field is greather than/equal to specific value. Support Types Type Integer Float Double Parameters Parameter Name Description Value Min possible value for number field. PropertyName Min possible value represented in property for number field. Tolerance TODO! Examples [MinValue(\"minHealth\")] public int health ; [MinValue(0)] public int minHealth ; [MinValue(\"walkSpeed\", 1)] public float runSpeed ; [MinValue(1)] public float walkSpeed ; [MinValue(10)] public double someValue ; [MinValue(\"someValue\", 0.1f)] public double someValue2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MinValue(1)] public int speed ; } Live demo","title":"Min Value"},{"location":"attributes/validator_attributes/min-value/#min-value","text":"[MinValue] The attribute checks that the number field is greather than/equal to specific value.","title":"Min Value"},{"location":"attributes/validator_attributes/min-value/#support-types","text":"Type Integer Float Double","title":"Support Types"},{"location":"attributes/validator_attributes/min-value/#parameters","text":"Parameter Name Description Value Min possible value for number field. PropertyName Min possible value represented in property for number field. Tolerance TODO!","title":"Parameters"},{"location":"attributes/validator_attributes/min-value/#examples","text":"[MinValue(\"minHealth\")] public int health ; [MinValue(0)] public int minHealth ; [MinValue(\"walkSpeed\", 1)] public float runSpeed ; [MinValue(1)] public float walkSpeed ; [MinValue(10)] public double someValue ; [MinValue(\"someValue\", 0.1f)] public double someValue2 ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/validator_attributes/min-value/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MinValue(1)] public int speed ; } Live demo","title":"Demo"},{"location":"attributes/validator_attributes/not-null/","text":"Not Null [NotNull] The attribute checks that the Object field is not null. Support Types Type Object Parameters Parameter Name Description Arguments Format Custom message format {name} Size Box message size. None Examples [NotNull] public GameObject player ; [NotNull(Format = \"{name} is required!\")] public GameObject player ; [NotNull(Size = MessageBoxSize.Inline)] public GameObject player ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [NotNull(Format = \"{name} is cannot be empty!\", Size = MessageBoxSize.Small)] public GameObject player ; } Live demo","title":"Not Null"},{"location":"attributes/validator_attributes/not-null/#not-null","text":"[NotNull] The attribute checks that the Object field is not null.","title":"Not Null"},{"location":"attributes/validator_attributes/not-null/#support-types","text":"Type Object","title":"Support Types"},{"location":"attributes/validator_attributes/not-null/#parameters","text":"Parameter Name Description Arguments Format Custom message format {name} Size Box message size. None","title":"Parameters"},{"location":"attributes/validator_attributes/not-null/#examples","text":"[NotNull] public GameObject player ; [NotNull(Format = \"{name} is required!\")] public GameObject player ; [NotNull(Size = MessageBoxSize.Inline)] public GameObject player ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/validator_attributes/not-null/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [NotNull(Format = \"{name} is cannot be empty!\", Size = MessageBoxSize.Small)] public GameObject player ; } Live demo","title":"Demo"},{"location":"attributes/validator_attributes/scene-object-only/","text":"Scene Object Only [SceneObjectOnly] The attribute checks that the Object you want to add to the field is in scene. Support Types All object types. Parameters No parameters Examples [SceneObjectOnly] public GameObject value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SceneObjectOnly] public GameObject someObject ; } Live demo","title":"Scene Object Only"},{"location":"attributes/validator_attributes/scene-object-only/#scene-object-only","text":"[SceneObjectOnly] The attribute checks that the Object you want to add to the field is in scene.","title":"Scene Object Only"},{"location":"attributes/validator_attributes/scene-object-only/#support-types","text":"All object types.","title":"Support Types"},{"location":"attributes/validator_attributes/scene-object-only/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/validator_attributes/scene-object-only/#examples","text":"[SceneObjectOnly] public GameObject value ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/validator_attributes/scene-object-only/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SceneObjectOnly] public GameObject someObject ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/array/","text":"Array [Array] attribute used for drawing flexible arrays. Support Types Type Description Example T[] Default C# array string[] List<T> Collection generic List List<string> Info Where T is type of array elements. Parameters Parameter Name Description Arguments ElementLabel Custom element label display format. {index} {niceIndex} CountLabel Custom element count label display format. {count} Examples [Array] public int [] values ; [Array(ElementLabel = \"User Name: {niceIndex}\")] public List < string > names ; [Array(ElementLabel = null, CountLabel = \"{count} Points\")] public Transform [] point ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Array(ElementLabel = \"Material: {niceIndex}\", CountLabel = \"{count} Items\")] public Material [] materials ; } Live demo","title":"Array"},{"location":"attributes/view_attributes/array/#array","text":"[Array] attribute used for drawing flexible arrays.","title":"Array"},{"location":"attributes/view_attributes/array/#support-types","text":"Type Description Example T[] Default C# array string[] List<T> Collection generic List List<string> Info Where T is type of array elements.","title":"Support Types"},{"location":"attributes/view_attributes/array/#parameters","text":"Parameter Name Description Arguments ElementLabel Custom element label display format. {index} {niceIndex} CountLabel Custom element count label display format. {count}","title":"Parameters"},{"location":"attributes/view_attributes/array/#examples","text":"[Array] public int [] values ; [Array(ElementLabel = \"User Name: {niceIndex}\")] public List < string > names ; [Array(ElementLabel = null, CountLabel = \"{count} Points\")] public Transform [] point ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/array/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Array(ElementLabel = \"Material: {niceIndex}\", CountLabel = \"{count} Items\")] public Material [] materials ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/asset-selecter/","text":"Asset Selecter [AssetSelecter] attribute automatically showing in dropdown list all available asset type of property type. Support Types All asset types. Parameters Parameter Name Description Default Arguments AssetType Search asset type Type of field None Path Search asset path Assets None SearchOption Search asset option All Directories None Examples [AssetSelecter] public PhysicsMaterial value ; [AssetSelecter(AssetType = typeof(Texture2D))] public Object names ; [AssetSelecter(Path = \"Assets/My Materials\")] public Material material ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [AssetSelecter(AssetType = typeof(Material), Path = \"Assets/My Materials\")] public Object value ; } Live demo","title":"Asset Selecter"},{"location":"attributes/view_attributes/asset-selecter/#asset-selecter","text":"[AssetSelecter] attribute automatically showing in dropdown list all available asset type of property type.","title":"Asset Selecter"},{"location":"attributes/view_attributes/asset-selecter/#support-types","text":"All asset types.","title":"Support Types"},{"location":"attributes/view_attributes/asset-selecter/#parameters","text":"Parameter Name Description Default Arguments AssetType Search asset type Type of field None Path Search asset path Assets None SearchOption Search asset option All Directories None","title":"Parameters"},{"location":"attributes/view_attributes/asset-selecter/#examples","text":"[AssetSelecter] public PhysicsMaterial value ; [AssetSelecter(AssetType = typeof(Texture2D))] public Object names ; [AssetSelecter(Path = \"Assets/My Materials\")] public Material material ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/asset-selecter/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [AssetSelecter(AssetType = typeof(Material), Path = \"Assets/My Materials\")] public Object value ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/dropdown-reference/","text":"Dropdown Reference [DropdownReference] attribute allows you to select one of the inheritors of the parent type. Support Types All references. Parameters No parameters Examples [SerializeReference] [DropdownReference] public Bullet bullet ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Make sure that you have added [SerializeReference] attribute to the referece field. Otherwise, it will not be displayed in the inspector. Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SerializeReference] [DropdownReference] public Animal animal ; } Animal class and inheritors public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Tip You can change the reference display type. Since this is done in the example for Tiger class. For that you can use [ReferenceContent] . Live demo","title":"Dropdown Reference"},{"location":"attributes/view_attributes/dropdown-reference/#dropdown-reference","text":"[DropdownReference] attribute allows you to select one of the inheritors of the parent type.","title":"Dropdown Reference"},{"location":"attributes/view_attributes/dropdown-reference/#support-types","text":"All references.","title":"Support Types"},{"location":"attributes/view_attributes/dropdown-reference/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/view_attributes/dropdown-reference/#examples","text":"[SerializeReference] [DropdownReference] public Bullet bullet ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Make sure that you have added [SerializeReference] attribute to the referece field. Otherwise, it will not be displayed in the inspector.","title":"Examples"},{"location":"attributes/view_attributes/dropdown-reference/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SerializeReference] [DropdownReference] public Animal animal ; } Animal class and inheritors public abstract class Animal { public abstract void Move ( Vector3 direction ); } public class Leon : Animal { public float valueFloat ; public override void Move ( Vector3 direction ) { // TODO } } public class Leopard : Animal { public int valueInt ; public string valueString ; public override void Move ( Vector3 direction ) { // TODO } } [ReferenceContent(\"Custom Tiger Label\")] public class Tiger : Animal { public float valueVector3 ; public string valueString ; public bool valueBool ; public override void Move ( Vector3 direction ) { // TODO } } Tip You can change the reference display type. Since this is done in the example for Tiger class. For that you can use [ReferenceContent] . Live demo","title":"Demo"},{"location":"attributes/view_attributes/file-path/","text":"File Path [FilePath] attribute allow to select corrent path to file via build-in in OS panel. Support Types String Parameters Parameter Name Description Title File panel title. Directory Start panel directory. Extension File extension filter. RelativePath Convert path to project relative. Only if selected file inside Assets folder. Examples [FilePath] public string filePath ; [FilePath(Title = \"Select Material...\")] public string materialPath ; [FilePath(Title = \"Select Texture...\", \"Assets/Textures\", RelativePath = true)] public string texturePath ; [FilePath(RelativePath = true)] public string scenePath ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [FilePath(RelativePath = true)] public string scriptPath ; } Live demo","title":"File Path"},{"location":"attributes/view_attributes/file-path/#file-path","text":"[FilePath] attribute allow to select corrent path to file via build-in in OS panel.","title":"File Path"},{"location":"attributes/view_attributes/file-path/#support-types","text":"String","title":"Support Types"},{"location":"attributes/view_attributes/file-path/#parameters","text":"Parameter Name Description Title File panel title. Directory Start panel directory. Extension File extension filter. RelativePath Convert path to project relative. Only if selected file inside Assets folder.","title":"Parameters"},{"location":"attributes/view_attributes/file-path/#examples","text":"[FilePath] public string filePath ; [FilePath(Title = \"Select Material...\")] public string materialPath ; [FilePath(Title = \"Select Texture...\", \"Assets/Textures\", RelativePath = true)] public string texturePath ; [FilePath(RelativePath = true)] public string scenePath ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/file-path/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [FilePath(RelativePath = true)] public string scriptPath ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/folder-path/","text":"Folder Path [FolderPath] attribute allow to select corrent path to the folder via build-in in OS panel. Support Types String Parameters Parameter Name Description Title Folder panel title. Folder Start panel folder. DefaultName Default folder name. RelativePath Convert path to project relative. Only if selected folder inside Assets folder. Examples [FolderPath] public string folderPath ; [FolderPath(Title = \"Select Material Folder...\")] public string materialFolder ; [FolderPath(Title = \"Select Folder With Texture...\", RelativePath = true)] public string textureFolder ; [FolderPath(RelativePath = true)] public string sceneFolder ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [FolderPath(RelativePath = true)] public string folderPath ; } Live demo","title":"Folder Path"},{"location":"attributes/view_attributes/folder-path/#folder-path","text":"[FolderPath] attribute allow to select corrent path to the folder via build-in in OS panel.","title":"Folder Path"},{"location":"attributes/view_attributes/folder-path/#support-types","text":"String","title":"Support Types"},{"location":"attributes/view_attributes/folder-path/#parameters","text":"Parameter Name Description Title Folder panel title. Folder Start panel folder. DefaultName Default folder name. RelativePath Convert path to project relative. Only if selected folder inside Assets folder.","title":"Parameters"},{"location":"attributes/view_attributes/folder-path/#examples","text":"[FolderPath] public string folderPath ; [FolderPath(Title = \"Select Material Folder...\")] public string materialFolder ; [FolderPath(Title = \"Select Folder With Texture...\", RelativePath = true)] public string textureFolder ; [FolderPath(RelativePath = true)] public string sceneFolder ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/folder-path/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [FolderPath(RelativePath = true)] public string folderPath ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/reorderable-list/","text":"Reorderable List [ReorderableList] attribute used for drawing reorderable arrays/lists. Support Types Type Description Example T[] Default C# array string[] List<T> Collection generic List List<string> Info Where T is type of array elements. Parameters Parameter Name Description Arguments ElementLabel Custom element name display format. {index} {niceIndex} Draggable Set false to disable element drag function. None DrawClearButton Set true to display button to clear all list elements. None Examples [ReorderableList] public int [] values ; [ReorderableList(ElementLabel = \"User Name: {niceIndex}\", Draggable = false)] public List < string > names ; [ReorderableList(ElementLabel = null, ClearButton = true)] public Transform [] point ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ReorderableList(ElementLabel = null, ClearButton = true)] public List < Transform > waypoints ; } Live demo","title":"Reorderable List"},{"location":"attributes/view_attributes/reorderable-list/#reorderable-list","text":"[ReorderableList] attribute used for drawing reorderable arrays/lists.","title":"Reorderable List"},{"location":"attributes/view_attributes/reorderable-list/#support-types","text":"Type Description Example T[] Default C# array string[] List<T> Collection generic List List<string> Info Where T is type of array elements.","title":"Support Types"},{"location":"attributes/view_attributes/reorderable-list/#parameters","text":"Parameter Name Description Arguments ElementLabel Custom element name display format. {index} {niceIndex} Draggable Set false to disable element drag function. None DrawClearButton Set true to display button to clear all list elements. None","title":"Parameters"},{"location":"attributes/view_attributes/reorderable-list/#examples","text":"[ReorderableList] public int [] values ; [ReorderableList(ElementLabel = \"User Name: {niceIndex}\", Draggable = false)] public List < string > names ; [ReorderableList(ElementLabel = null, ClearButton = true)] public Transform [] point ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/reorderable-list/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ReorderableList(ElementLabel = null, ClearButton = true)] public List < Transform > waypoints ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/scene-selecter/","text":"Scene Selecter [SceneSelecter] allows to select scene via convenient dropdown list. Support Types Type Description Integer Saving selected scene id String Saving selected scene name Parameters No parameters Examples [SceneSelecter] public int menuSceneId ; [SceneSelecter] public string menuSceneName ; Warning SceneSelecter attribute load scenes from build settings. If build settings don't contain scenes, field will be disabled. This is done in order to avoid the error that developers may make if they choose a scene that was not added to the settings. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SceneSelecter] public int value ; } Live demo","title":"Scene Selecter"},{"location":"attributes/view_attributes/scene-selecter/#scene-selecter","text":"[SceneSelecter] allows to select scene via convenient dropdown list.","title":"Scene Selecter"},{"location":"attributes/view_attributes/scene-selecter/#support-types","text":"Type Description Integer Saving selected scene id String Saving selected scene name","title":"Support Types"},{"location":"attributes/view_attributes/scene-selecter/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/view_attributes/scene-selecter/#examples","text":"[SceneSelecter] public int menuSceneId ; [SceneSelecter] public string menuSceneName ; Warning SceneSelecter attribute load scenes from build settings. If build settings don't contain scenes, field will be disabled. This is done in order to avoid the error that developers may make if they choose a scene that was not added to the settings. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/scene-selecter/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SceneSelecter] public int value ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/selectable-enum/","text":"Selectable Enum [SelectableEnum] attribute display enums in user-friendly menu with search feature. Support Types All enum types. Parameters Parameter Name Description Sort Automatically sort enum values. Height Set max menu height. DisableValues Array of enum values, which should be disabled. HideValues Array of enum values, which should be hided. Examples [SelectableEnum] public KeyCode key ; [SelectableEnum(Sort = true)] public KeyCode key ; [SelectableEnum(DisableValues = new string[1] { \"None\" })] public KeyCode key ; [SelectableEnum(Sort = true, HideValues = new string[1] { \"None\" })] public KeyCode key ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SelectableEnum] public KeyCode value ; } Live demo","title":"Selectable Enum"},{"location":"attributes/view_attributes/selectable-enum/#selectable-enum","text":"[SelectableEnum] attribute display enums in user-friendly menu with search feature.","title":"Selectable Enum"},{"location":"attributes/view_attributes/selectable-enum/#support-types","text":"All enum types.","title":"Support Types"},{"location":"attributes/view_attributes/selectable-enum/#parameters","text":"Parameter Name Description Sort Automatically sort enum values. Height Set max menu height. DisableValues Array of enum values, which should be disabled. HideValues Array of enum values, which should be hided.","title":"Parameters"},{"location":"attributes/view_attributes/selectable-enum/#examples","text":"[SelectableEnum] public KeyCode key ; [SelectableEnum(Sort = true)] public KeyCode key ; [SelectableEnum(DisableValues = new string[1] { \"None\" })] public KeyCode key ; [SelectableEnum(Sort = true, HideValues = new string[1] { \"None\" })] public KeyCode key ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/selectable-enum/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [SelectableEnum] public KeyCode value ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/tag-popup/","text":"Tag Popup [TagPopup] attribute allows to select tag via convenient dropdown list. Support Types String Parameters No parameters Examples [TagPopup] public string tag ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [TagPopup] public string value ; } Live demo","title":"Tag Popup"},{"location":"attributes/view_attributes/tag-popup/#tag-popup","text":"[TagPopup] attribute allows to select tag via convenient dropdown list.","title":"Tag Popup"},{"location":"attributes/view_attributes/tag-popup/#support-types","text":"String","title":"Support Types"},{"location":"attributes/view_attributes/tag-popup/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/view_attributes/tag-popup/#examples","text":"[TagPopup] public string tag ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/tag-popup/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [TagPopup] public string value ; } Live demo","title":"Demo"},{"location":"attributes/view_attributes/toggle-left/","text":"Toggle Left [ToggleLeft] attribute draw toggle on a left side of the field. Support Types Boolean Parameters No parameters Examples [ToggleLeft] public bool toggle ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; Demo using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ToggleLeft] public bool toggle ; } Live demo","title":"Toggle Left"},{"location":"attributes/view_attributes/toggle-left/#toggle-left","text":"[ToggleLeft] attribute draw toggle on a left side of the field.","title":"Toggle Left"},{"location":"attributes/view_attributes/toggle-left/#support-types","text":"Boolean","title":"Support Types"},{"location":"attributes/view_attributes/toggle-left/#parameters","text":"No parameters","title":"Parameters"},{"location":"attributes/view_attributes/toggle-left/#examples","text":"[ToggleLeft] public bool toggle ; Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ;","title":"Examples"},{"location":"attributes/view_attributes/toggle-left/#demo","text":"using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ToggleLeft] public bool toggle ; } Live demo","title":"Demo"},{"location":"manual/attribute_types/property-groups/","text":"Groups Property group attributes used for grouping properties. Info Each property can have multiple different group attributes. Demo Let's create three field. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public int health ; public int minHealth ; public int maxHealth ; } Default fields view Let\u2019s add [Group] attribute to these three fields and name it Health Settings [Group(\"Health Settings\")] . Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] public int health ; [Group(\"Health Settings\")] public int minHealth ; [Group(\"Health Settings\")] public int maxHealth ; } View after using [Group] attributes You can combine differents group attributes. Let's add [Foldout] attribute to minHealth and maxHealth fields and name it Limits . using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] public int health ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] public int minHealth ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] public int maxHealth ; } View after combining [Group] and [Foldout] attributes Let's set limits for minHealth and maxHealth fields by using [MinValue] and [MaxValue] validator attributes. using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] [MinValue(\"minHealth\")] [MaxValue(\"maxHealth\")] public int health ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] [MinValue(0)] [MaxValue(\"maxHealth\")] public int minHealth ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] [MinValue(\"minHealth\")] [MaxValue(100)] public int maxHealth ; } View after add [MinValue] and [MaxValue] validators","title":"Groups"},{"location":"manual/attribute_types/property-groups/#groups","text":"Property group attributes used for grouping properties. Info Each property can have multiple different group attributes.","title":"Groups"},{"location":"manual/attribute_types/property-groups/#demo","text":"Let's create three field. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public int health ; public int minHealth ; public int maxHealth ; } Default fields view Let\u2019s add [Group] attribute to these three fields and name it Health Settings [Group(\"Health Settings\")] . Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] public int health ; [Group(\"Health Settings\")] public int minHealth ; [Group(\"Health Settings\")] public int maxHealth ; } View after using [Group] attributes You can combine differents group attributes. Let's add [Foldout] attribute to minHealth and maxHealth fields and name it Limits . using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] public int health ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] public int minHealth ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] public int maxHealth ; } View after combining [Group] and [Foldout] attributes Let's set limits for minHealth and maxHealth fields by using [MinValue] and [MaxValue] validator attributes. using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Group(\"Health Settings\")] [MinValue(\"minHealth\")] [MaxValue(\"maxHealth\")] public int health ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] [MinValue(0)] [MaxValue(\"maxHealth\")] public int minHealth ; [Group(\"Health Settings\")] [Foldout(\"Limits\")] [MinValue(\"minHealth\")] [MaxValue(100)] public int maxHealth ; } View after add [MinValue] and [MaxValue] validators","title":"Demo"},{"location":"manual/attribute_types/property-painters/","text":"Painters Property painter attributes can add additional visual elements on property. Info Each property can have multiple property painters. Demo Let\u2019s create GameObject field. And add to this field default Cube primitive. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public GameObject someObject ; } Default GameObject view Let\u2019s add [ObjectPreview] attribute and set attribute parameter \u00abexpandable\u00bb on true. [ObjectPreview(true)] Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ObjectPreview(true)] public GameObject someObject ; } GameObject field after using Apex [ObjectPreview] painter attribute","title":"Painters"},{"location":"manual/attribute_types/property-painters/#painters","text":"Property painter attributes can add additional visual elements on property. Info Each property can have multiple property painters.","title":"Painters"},{"location":"manual/attribute_types/property-painters/#demo","text":"Let\u2019s create GameObject field. And add to this field default Cube primitive. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public GameObject someObject ; } Default GameObject view Let\u2019s add [ObjectPreview] attribute and set attribute parameter \u00abexpandable\u00bb on true. [ObjectPreview(true)] Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [ObjectPreview(true)] public GameObject someObject ; } GameObject field after using Apex [ObjectPreview] painter attribute","title":"Demo"},{"location":"manual/attribute_types/property-validators/","text":"Validators Property validator attributes check properties for the valid of the specified conditions. Info Each property can have multiple property validators. Demo Let\u2019s create float value. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; } Before use validators Let\u2019s add [MinValue(0)] and [MaxValue(10)] attributes to clamp value range in 0-10. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MinValue(0)] [ MaxValue ( 10 )] public float value ; } Array after using Apex [MinValue] and [MaxValue] attributes","title":"Validators"},{"location":"manual/attribute_types/property-validators/#validators","text":"Property validator attributes check properties for the valid of the specified conditions. Info Each property can have multiple property validators.","title":"Validators"},{"location":"manual/attribute_types/property-validators/#demo","text":"Let\u2019s create float value. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public float value ; } Before use validators Let\u2019s add [MinValue(0)] and [MaxValue(10)] attributes to clamp value range in 0-10. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [MinValue(0)] [ MaxValue ( 10 )] public float value ; } Array after using Apex [MinValue] and [MaxValue] attributes","title":"Demo"},{"location":"manual/attribute_types/property-views/","text":"Views Property view attributes completely change how the property is drawing and how you interact with it. Info Each property can only have one property view. Demo Let\u2019s create array of materials. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public Material [] array ; } Default array view Let\u2019s add [Array] attribute to array of materials. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Array] public Material [] array ; } After adding [Array] attribute","title":"Views"},{"location":"manual/attribute_types/property-views/#views","text":"Property view attributes completely change how the property is drawing and how you interact with it. Info Each property can only have one property view.","title":"Views"},{"location":"manual/attribute_types/property-views/#demo","text":"Let\u2019s create array of materials. using UnityEngine ; public class ExampleComponent : MonoBehaviour { public Material [] array ; } Default array view Let\u2019s add [Array] attribute to array of materials. Note Make sure that you have added ApexInspector namespace in your script, to get access to all attributes. using ApexInspector ; using ApexInspector ; using UnityEngine ; public class ExampleComponent : MonoBehaviour { [Array] public Material [] array ; } After adding [Array] attribute","title":"Demo"},{"location":"manual/global_settings/setting/","text":"Settings For edit global apex settings open Project Settings window: Edit/Project Settings.../Apex Inspector Apex Inspector settings Base Settings Property Description Type Apex Enabled Enable/disable apex extension in project. bool Property Space Addition space to the properties. float Ranged: [0-\u221e] Highlight Expandable Property Select which expandable properties needed to highlight. enum Align Expandable Property Set true to algin all expandable properties with the others. bool Light Theme Colors Light theme colors settings active while enabled Ligth editor theme. Property Description Type Group Header Color Group attribute header color. color Property Header Color Header color of the Array , DropdownReference color Group Border Color Color of the group borders color Property Border Color Border colors of the Array , DropdownReference color Dark Theme Colors Dark theme colors settings active while enabled Dark editor theme. Property Description Type Group Header Color Group attribute header color. color Property Header Color Header color of the Array , DropdownReference color Group Border Color Color of the group borders color Property Border Color Border colors of the Array , DropdownReference color Reset Settings If you want to reset all settings on default values, use Gear button, in the upper-right corner of the window. Live demo","title":"Settings"},{"location":"manual/global_settings/setting/#settings","text":"For edit global apex settings open Project Settings window: Edit/Project Settings.../Apex Inspector Apex Inspector settings","title":"Settings"},{"location":"manual/global_settings/setting/#base-settings","text":"Property Description Type Apex Enabled Enable/disable apex extension in project. bool Property Space Addition space to the properties. float Ranged: [0-\u221e] Highlight Expandable Property Select which expandable properties needed to highlight. enum Align Expandable Property Set true to algin all expandable properties with the others. bool","title":"Base Settings"},{"location":"manual/global_settings/setting/#light-theme-colors","text":"Light theme colors settings active while enabled Ligth editor theme. Property Description Type Group Header Color Group attribute header color. color Property Header Color Header color of the Array , DropdownReference color Group Border Color Color of the group borders color Property Border Color Border colors of the Array , DropdownReference color","title":"Light Theme Colors"},{"location":"manual/global_settings/setting/#dark-theme-colors","text":"Dark theme colors settings active while enabled Dark editor theme. Property Description Type Group Header Color Group attribute header color. color Property Header Color Header color of the Array , DropdownReference color Group Border Color Color of the group borders color Property Border Color Border colors of the Array , DropdownReference color","title":"Dark Theme Colors"},{"location":"manual/global_settings/setting/#reset-settings","text":"If you want to reset all settings on default values, use Gear button, in the upper-right corner of the window. Live demo","title":"Reset Settings"}]}